#!/usr/bin/env python3
import argparse
import requests
from bs4 import BeautifulSoup
from tabulate import tabulate
from colorama import Fore, Style
import pyfiglet


def banner():
    banner_text = pyfiglet.figlet_format("BINALYZE", font="digital")
    print(Fore.CYAN + Style.BRIGHT + banner_text + Style.RESET_ALL)


def get_cve_table(keyword):
    url = f"https://cve.mitre.org/cgi-bin/cvekey.cgi?keyword={keyword}"
    response = requests.get(url)
    
    if response.status_code == 200:
        soup = BeautifulSoup(response.text, 'html.parser')
        table = soup.find('div', id='TableWithRules').find('table')
        headers = [header.get_text().strip() for header in table.find_all('th')]
        
        rows = []
        for row in table.find_all('tr')[1:]:  # Exclude header row
            rows.append([data.get_text().strip() for data in row.find_all('td')])
        
        return headers, rows
    else:
        print(Fore.RED+"Failed to fetch data from URL."+ Style.RESET_ALL)
        return None, None

def display_table(headers, rows):
    colored_headers = [Style.BRIGHT + Fore.GREEN + header + Style.RESET_ALL for header in headers] 
    colored_rows = []
    for row in rows:
        colored_row = []
        for i, cell in enumerate(row):
            if i == 0:
                colored_row.append(Fore.CYAN + cell + Style.RESET_ALL)  
            elif i == 1:
                colored_row.append(Fore.YELLOW + cell + Style.RESET_ALL)  
            else:
                colored_row.append(cell)
        colored_rows.append(colored_row)
    
    print(tabulate(colored_rows, headers=colored_headers, tablefmt="plain"))

if __name__ == "__main__":
    banner()
    parser = argparse.ArgumentParser(description=Fore.CYAN+"Search CVEs for a keyword"+Style.RESET_ALL)
    parser.add_argument("-search", type=str, help="Keyword to search for", required=True)
    args = parser.parse_args()

    headers, rows = get_cve_table(args.search)
    if headers and rows:
        display_table(headers, rows)